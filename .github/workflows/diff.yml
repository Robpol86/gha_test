name: Diff

on:
  pull_request:
    types:
      # Defaults
      - opened
      - synchronize
      - reopened
      # Additional
      - closed

env:
  BRANCH_NAME_HTML_OLD: __diff__html_old
  COLLAPSE_GT_LINES: 10
  DIFF_CONTEXT: 5
  GIT_IGNORE: |
    .doctrees/
    __pycache__/
  PRETTIER_GLOB: "**/*.{js,css,html,xml}"
  ROOT_DIR_DIFF: ./build/html
  TRUNCATE_TO_BYTES: 253952

jobs:

  build:
    name: Build HTML
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Initialize dependencies
        uses: Robpol86/actions-init-deps-py@v3
        with:
          no-dev: "true"
      - name: Build docs
        env:
          SPHINX_GITHUB_BRANCH: main
          SPHINX_HTML_BASEURL: "https://rob86stage.robpol86.com/"
        run: make docs
      - name: Create .gitignore
        run: printenv GIT_IGNORE |tee -a "$ROOT_DIR_DIFF/.gitignore"
      - name: Prettify
        run: |
          PS4="\n\033[1;33m$PS4\033[0m"
          set -euxo pipefail
          npm install -g prettier @prettier/plugin-xml
          prettier --write "$ROOT_DIR_DIFF/$PRETTIER_GLOB"
      - name: Store HTML as temporary artifact
        if: github.event.action != 'closed'
        uses: actions/upload-artifact@v3
        with:
          name: html_new
          if-no-files-found: error
          path: "${{ env.ROOT_DIR_DIFF }}"
      - name: Store HTML in orphaned branch
        if: github.event.pull_request.merged && github.event.pull_request.base.ref == 'main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          commit_message: "[skip ci]"
          enable_jekyll: true  # Don't create .nojekyll
          force_orphan: true  # Discard git history
          github_token: "${{ secrets.GITHUB_TOKEN }}"
          publish_branch: "${{ env.BRANCH_NAME_HTML_OLD }}"
          publish_dir: "${{ env.ROOT_DIR_DIFF }}"

  diff:
    name: Diff
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Fetch old HTML
        uses: actions/checkout@v3
        with:
          ref: "${{ env.BRANCH_NAME_HTML_OLD }}"
          path: html
      - name: Prepare for new HTML
        run: git -C html rm -r . && git -C html restore --staged .
      - name: Fetch new HTML
        uses: actions/download-artifact@v3
        with:
          name: html_new
          path: html
      - name: Git Status
        run: |
          git -C html status --porcelain --untracked-files=all |tee git_status.txt
          [ -s git_status.txt ] || rm -v git_status.txt
      - name: Git Diff
        if: hashFiles('git_status.txt')
        run: |
          git -C html diff --diff-filter=M --unified="$DIFF_CONTEXT" HEAD |tee git_diff.patch
          [ -s git_diff.patch ] || rm -v git_diff.patch
      - name: Truncate
        if: hashFiles('git_diff.patch')
        run: |
          cp git_diff.patch git_diff.patch.orig
          head --bytes="$TRUNCATE_TO_BYTES" git_diff.patch.orig > git_diff.patch
          if ! cmp -s git_diff.patch git_diff.patch.orig; then
            echo -e "\n\nTruncated" |tee -a git_diff.patch
            tail --bytes=+"$(( TRUNCATE_TO_BYTES + 1 ))" git_diff.patch.orig > git_diff.patch.truncated
          fi
          rm -v git_diff.patch.orig
      - name: Store text/patch files as temporary artifacts
        if: hashFiles('git_status.txt')
        uses: actions/upload-artifact@v3
        with:
          name: git_status_diff
          path: |
            git_status.txt
            git_diff.patch
            git_diff.patch.truncated

  post:
    name: Post
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    needs: diff
    steps:
      - name: Fetch text/patch files
        uses: actions/download-artifact@v3
        with:
          name: git_status_diff
      - name: Install dependencies
        if: hashFiles('git_diff.patch')
        run: sudo apt-get update && sudo apt-get install -y splitpatch
      - name: Split patch
        if: hashFiles('git_diff.patch')
        run: splitpatch git_diff.patch && rm -v git_diff.patch && ls -lah
      - name: Post
        uses: actions/github-script@v6
        env:
          FLAG_CHANGED: "${{ hashFiles('git_status.txt') }}"
          FLAG_TRUNCATED: "${{ hashFiles('git_diff.patch.truncated') }}"
          HEADER_URL: "https://github.com/${{ github.repository }}/tree/${{ env.BRANCH_NAME_HTML_OLD }}"
        with:
          script: |
            // TODO split this into two or more steps?
            const fs = require(`fs`)

            function collapse(str) {
              var numLines = str.match(/^/mg).length
              if (numLines > parseInt(process.env.COLLAPSE_GT_LINES))
                return `<details>\n<summary>Show ${numLines} lines</summary>\n\n${str}\n</details>`
              return str
            }

            function genBody() {
              if (!process.env.FLAG_CHANGED) return `*No HTML changes detected.*`
              var body

              // git status
              const gitStatus = fs.readFileSync(`git_status.txt`, {encoding:`utf8`, flag:`r`})
              body = collapse(`\`\`\`diff\n${gitStatus}\n\`\`\`\n`)

              // git diff patch files
              // TODO

              return body
            }

            function genHeader() {
              var header = `Diff Against [Old HTML](${process.env.HEADER_URL})`
              if (!process.env.FLAG_TRUNCATED) return header
              var size = fs.statSync(`git_diff.patch.truncated`).size
              return `${header} (${size} Byte${size == 1 ? '' : 's'} Truncated)`
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### ${genHeader()}\n\n${genBody()}`
            })
