name: Deploy

on:
  pull_request:
  push:
    # Staging
    branches: ["**", "!**_pr"]
    # Production
    tags: ["[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]"]

env:
  BASEURL_PROD: https://robpol86.com/
  BASEURL_STAGE: https://rob86stage.robpol86.com/
  HTML_ROOT: ./docs/_build/html
  IS_PROD: "${{ startsWith(github.ref, 'refs/tags/') && 'true' || '' }}"
  PYTHON_VERSION: "3.10"

jobs:

  build:
    name: Build HTML
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Initialize dependencies
        uses: Robpol86/actions-init-deps-py@v3
        with:
          python-version: "${{ env.PYTHON_VERSION }}"
          no-dev: "true"
      - name: Build docs
        env:
          SPHINX_HTML_BASEURL: "${{ env.IS_PROD && env.BASEURL_PROD || env.BASEURL_STAGE }}"
        run: make docs
      - name: Store HTML as temporary artifact
        uses: actions/upload-artifact@v2
        with:
          name: html
          if-no-files-found: error
          path: "${{ env.HTML_ROOT }}"
      - name: Get version
        id: version
        env:
          AWK_PROGRAM: |
            match($0, /([0-9]{4})[^0-9]([0-9]{1,2})[^0-9]([0-9]{1,2})[[:space:]]*$/, ymd) {
              printf("::set-output name=VERSION::%d.%d.%d\n", ymd[1], ymd[2], ymd[3])
              flag = 1
              exit
            }
            END { exit !flag }
        run: ${{ env.IS_PROD && 'printenv GITHUB_REF_NAME' || 'poetry version' }} |awk "$AWK_PROGRAM"
      - name: Find version in changelog
        id: section_start
        env:
          AWK_PROGRAM: |
            @include ".github/workflows/deploy.awk"
            BEGIN {
              version = "${{ steps.version.outputs.VERSION }}"  # e.g. 2022.4.1
            }
            /^## \[[0-9]/ {
              found = 1
              if (!match($0, /^## \[([0-9]{4}[.][0-9]{1,2}[.][0-9]{1,2})]$/, a)) error("First section invalid format")
              if (a[1] != version) error("First section doesnt match version")
              printf("::set-output name=NR::%d\n" NR+1)
              exit 0
            }
            END {
              if (!found) error("No section found for version " + version)
            }
        run: awk "$AWK_PROGRAM" CHANGELOG.md
